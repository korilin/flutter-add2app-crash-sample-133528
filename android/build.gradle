import java.util.regex.Pattern

buildscript {
    ext.kotlin_version = '1.7.10'
    ext.gradle_version = '7.2.2'
    ext.navigation_version = '2.5.2'
    ext.lifecycle_version = '2.5.1'
    ext.moshi_version = '1.14.0'
    ext.glide_version = '4.13.2'

    repositories {
        google()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:$gradle_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:${navigation_version}"
        classpath 'com.google.gms:google-services:4.3.14'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.9.1'
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}


ext.versionCode = project.hasProperty('versionCode') ? project.getProperty('versionCode') : 74
ext.versionName = project.hasProperty('versionName') ? project.getProperty('versionName') : "2.0"

task incrementVersionCode {
    doLast {
        def code = versionCode as Integer

        def buildGradle = file("app/build.gradle")
        def buildGradleContents = buildGradle.getText()
        def matcher = Pattern.compile("versionCode\\s(\\d+)").matcher(buildGradleContents)
        buildGradle.write(matcher.replaceAll("versionCode ${code + 1}"))
    }
}

task incrementVersionName {
    doLast {
        def index = versionName.indexOf(".")
        def major = versionName.substring(0, index) as Integer
        def minor = versionName.substring(index + 1) as Integer

        def buildGradle = file("app/build.gradle")
        def buildGradleContents = buildGradle.getText()
        def matcher = Pattern.compile("versionName\\s\\\"([.]?\\d+)+\\\"").matcher(buildGradleContents)
        buildGradle.write(matcher.replaceAll("versionName \"${major}.${minor + 1}\""))
    }
}

task resetVersionCode {
    doLast {
        def buildGradle = file("app/build.gradle")
        def buildGradleContents = buildGradle.getText()
        def matcher = Pattern.compile("versionCode\\s(\\d+)").matcher(buildGradleContents)
        buildGradle.write(matcher.replaceAll("versionCode ${versionCode}"))
    }
}

task resetVersionName {
    doLast {
        def buildGradle = file("app/build.gradle")
        def buildGradleContents = buildGradle.getText()
        def matcher = Pattern.compile("versionName\\s\\\"([.]?\\d+)+\\\"").matcher(buildGradleContents)
        buildGradle.write(matcher.replaceAll("versionName \"${versionName}\""))
    }
}
